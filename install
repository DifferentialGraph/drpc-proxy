#!/bin/bash -i

basics-install() {
    apt update
    apt -y install ca-certificates curl grep git
}

docker-install() {
    if ! grep -q "docker" <<< $(find /etc/apt/ -name *.list | xargs cat | grep  ^[[:space:]]*deb | grep -v deb-src); then
        echo "Installing Docker..."
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc
        echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt update && apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
        apt -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
    fi
}

nodejs-install() {
    if [ ! -d "$HOME/.nvm" ]; then
        echo "Adding NVM"
        apt -y install curl grep
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
        source $HOME/.bashrc
        nvm install --lts
        nvm use --lts
    fi

    if [ `npm list -g | grep -c pino-pretty` -eq 0 ]; then
        echo "Adding Pino Pretty"
        npm install -g pino-pretty
    fi
}

# rsa keys
rsakeys-generate() {
    whiptail --title "DRPC Proxy" --yesno "Generate RSA keys?" 8 78 || { echo "User exit"; return; }

    apt -y install openssl
    openssl genrsa -out ./keys/private-$PROVIDER_NAME.pem 2048
    openssl rsa -in ./keys/private-$PROVIDER_NAME.pem -pubout -out ./keys/public-$PROVIDER_NAME.pem
    openssl pkcs8 -topk8 -inform PEM -outform PEM -in ./keys/private-$PROVIDER_NAME.pem -out ./keys/private-$PROVIDER_NAME.p8.key -nocrypt
    rm ./keys/private-$PROVIDER_NAME.pem
}

reverseproxy-check() {
    if [ "$( docker container inspect -f '{{.State.Running}}' nginx-proxy )" = "false" ] || [ "$( docker container inspect -f '{{.State.Running}}' nginx-ssl )" = "false" ]; then
        return 1
    fi
}

drpcproxy-install() {
    if [ -f "./config/config.yaml" ]; then
        export PROVIDER_NAME PROVIDER_HOST
        envsubst < ./config/config.yaml > ./config/config-tmp.yaml
        rm ./config/config.yaml && mv ./config/config-tmp.yaml ./config/config.yaml
    else
        return 1
    fi

    DRPC_CONFIG_PATH=/var/lib/docker/volumes/reverse-proxy_vhost/_data/
    echo 'grpc_pass grpcs://drpc.'${PROVIDER_HOST}';' > ${DRPC_CONFIG_PATH}/drpc.${PROVIDER_HOST}_location

    docker compose --env-file .env.user up -d --remove-orphans --build
    sleep 1

    if [ ! -z "$PROVIDER_CHAINS" ]; then
        for CHAIN in ${PROVIDER_CHAINS[@]}; do
            docker network connect $CHAIN drpc-proxy
        done
    fi

    unset PROVIDER_NAME PROVIDER_HOST

    if ! grep -q "#drpc-setup" ~/.bashrc; then
        echo "Modifying .bashrc ..."
        DIR="$( cd "$( dirname -- $0 )" && pwd )"
        echo -e "\n" >> ~/.bashrc
        echo "#drpc-setup" >> ~/.bashrc
        echo "export DRPC_DIR=$DIR" >> ~/.bashrc
        echo 'source $DRPC_DIR/utils/manage' >> ~/.bashrc
        source ~/.bashrc
    fi
}

apt update && apt install -y whiptail
whiptail --title "DRPC Proxy" --yesno "Install DPRC Proxy?" 8 78 || { echo "User exit"; exit 1; }

# basics
basics-install || { echo "Error: could not install basic tools"; exit 1; }

# var
if [ -f ".env.user" ]; then
    source .env.user
else
    echo "Error: environment file not found";
    exit 1;
fi

# docker
docker-install || { echo "Error: could not install Docker"; exit 1; }

# node.js (better log visualization)
nodejs-install || { echo "Error: could not install Node.js"; exit 1; }

# rsa keys
rsakeys-generate || { echo "Error: could not generate RSA keys"; exit 1; }

# reverse proxy
reverseproxy-check || { echo "Error: reverse proxy not running"; exit 1; }

# drpc
drpcproxy-install || { echo "Error: could not install DRPC proxy"; exit 1; }